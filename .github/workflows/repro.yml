name: Bitcoin Binaries Reproducible Builds
on:
  push:
    paths-ignore:
    # Changes to these artifacts are autogenerated by this workflow
    # ignore them to prevent an infinite CI loop
    - '*/*.webm'
    - 'index.html'
jobs:
  reproBuild:
    runs-on: ubuntu-latest
    env:
      DISPLAY: ":0"
      RESOLUTION: "490x330"
      FRAMERATE: 12
    continue-on-error: true
    strategy:
      matrix:
        # Working: coldcard, lnd, bitcoin-core, mycelium-android, zap-android, simple-bitcoin-wallet, wasabi, sparrow, blockstream-green
        # WIP: trezor-firmware, bitbox02-firmware
        project: [coldcard, coldcard-mk3, lnd, bitcoin-core, mycelium-android, zap-android, simple-bitcoin-wallet, wasabi, sparrow, blockstream-green]
    steps:
      - name: Setup xvfb for video capture
        run: |
          sudo apt install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0 xterm xfonts-base
          # start xvfb in the background
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 "${RESOLUTION}x24" &

      - name: Setup ffmpeg for video capture
        run: |
          sudo apt install -y ffmpeg

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install ARM toolchain
        if: ${{ matrix.project == 'coldcard' || matrix.project == 'coldcard-mk3' || matrix.project == 'trezor-firmware' || matrix.project == 'bitbox02-firmware' }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: 'latest'

      - name: Setup Java 17 (for Sparrow)
        if: ${{ matrix.project == 'sparrow' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17.0.2'

      - name: Setup Go (for lnd)
        if: ${{ matrix.project == 'lnd' }}
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'

      - name: Setup deps for BitBox02 firmware
        if: ${{ matrix.project == 'bitbox02-firmware' }}
        run: |
          sudo apt install -y libhidapi-dev cmake protobuf-compiler python3-protobuf
          
          ( cd /usr/local/bin && ln -s `which arm-none-eabi-gcc` arm-none-eabi-gcc )
          echo "/usr/local/bin" >> $GITHUB_PATH

          # nanopb
          wget 'https://jpa.kapsi.fi/nanopb/download/nanopb-0.4.5-linux-x86.tar.gz'
          tar xzf nanopb-0.4.5-linux-x86.tar.gz
          echo "`pwd`/nanopb-0.4.5-linux-x86/generator-bin" >> $GITHUB_PATH

          # protobuf
          #wget 'https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protoc-3.20.1-linux-x86_64.zip'
          #mkdir .local
          #unzip protoc-3.20.1-linux-x86_64.zip -d .local
          #echo "`pwd`/.local/bin" >> $GITHUB_PATH

          # protobuf-python
          #wget 'https://github.com/protocolbuffers/protobuf/releases/download/v3.20.1/protobuf-python-3.20.1.tar.gz'
          #tar xzf protobuf-python-3.20.1.tar.gz
          #cd protobuf-3.20.1/python
          #python setup.py build
          #sudo python setup.py install

      - name: Setup deps for Bitcoin Core
        if: ${{ matrix.project == 'bitcoin-core' }}
        run: |
          sudo apt install -y libboost-dev libevent-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils python3

      - name: Setup deps for Trezor (1/2)
        if: ${{ matrix.project == 'trezor-firmware' }}
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.11

      - name: Setup deps for Trezor (2/2) 
        if: ${{ matrix.project == 'trezor-firmware' }}
        run: |
          sudo apt install -y protobuf-compiler libsdl2-dev

      - name: Setup Java 16 (for Zap, Blockstream)
        if: ${{ matrix.project == 'zap-android' || matrix.project == 'blockstream-green' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '16'

      - name: Setup Java 8 (for Simple Bitcoin Wallet, Mycelium)
        if: ${{ matrix.project == 'simple-bitcoin-wallet' || matrix.project == 'mycelium-android' }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Setup Dotnet (for Wasabi)
        if: ${{ matrix.project == 'wasabi' }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '3.1.x'

      - name: Run ${{ matrix.project }} build
        env:
          PROJECT: ${{ matrix.project }}
        run: |
          REPO_ROOT_DIR=`pwd`
          cd ${PROJECT}
          VERSION=`perl -ne 'print "$1\n" if /^VERSION="?([^"]*)"?$/' artifacts.sh`
          # Only run if the project and version have not already been included
          if ! grep -q -i "${PROJECT}.*${VERSION}.*build bot" ../index.html ; then
            ffmpeg -nostats -y -video_size $RESOLUTION -framerate ${FRAMERATE} -f x11grab -i $DISPLAY ${PROJECT}-${VERSION}-video.webm &
            xterm -display $DISPLAY -e "cd ${REPO_ROOT_DIR}/${PROJECT} && ./steps.sh 2>&1 | tee log.out"
            # wait for steps to run
            pkill -f ffmpeg
            ./artifacts.sh >> ${PROJECT}-output.txt
            cat log.out
          fi ;

      - name: Stage ${{ matrix.project }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}
          path: |
            ${{ matrix.project }}/${{ matrix.project }}*-video.webm
            ${{ matrix.project }}/${{ matrix.project }}-output.txt

  reproCommit:
    needs:
      - reproBuild
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Gather artifacts from jobs
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Commit updates
        run: |
          # Append each new output line to the HTML table
          for o in `ls artifacts/*/*output.txt` ; do
            TEXT=`cat ${o}` ;
            perl -pi -e "s+^<ul class=\"log\">$+<ul class=\"log\">\n     ${TEXT}+" index.html ;
          done

          # Check in each new video artifact
          for dir in `ls -d artifacts/*` ; do
            p=`echo ${dir} | cut -f 2 -d '/'`
            mv artifacts/${p}/${p}*-video.webm ${p}/ ;
            git add ${p}/*-video.webm ;
          done

          git add index.html
          git config --local user.email 'action@github.com'
          git config --local user.name 'GitHub Action'
          git commit -m 'Add latest build artifacts'

      - name: Push updates
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
